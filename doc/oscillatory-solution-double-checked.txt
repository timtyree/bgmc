\begin{equation}\label{eqn:osc_sm}
dR(t)=\frac{-2a}{R}\cos\big(\omega (t_f-t) + \phi_f\big)dt + \sqrt{4\tilde{D}}dW_t
\end{equation}
\noindent where $a$ is the oscillatory attraction coefficient, and $\tilde{D},\,\omega,\,$ and $\phi_f$ are constant parameters.

Stochastic paths generated by Eqn.~\ref{eqn:osc_sm} exhibited parameter settings that successfully reproduced finer details of the MSR generated by both of the full models for parameter settings constrained to $\tilde{D}=2a$, as is shown in Fig. \ref{fig:4}A.  We found no parameter setting with $\tilde{D}\neq2a$ that was capable of reproducing the MSR of either of the full models.  With the constraint of $\tilde{D}=2a$, we observed the following analytic fit to the MSR of the oscillatory model in terms of the time until annihilation $t'=t_f-t$:

\begin{equation}\label{eqn:msrosc}
\text{MSR}_\text{Osc.}(t')=4at'+\frac{8D}{\omega}\Big(\sin(\omega t' + \phi_f) - \sin(\phi_f)\Big)
% \text{MSR}_\text{Osc.}(t')=4at' + \frac{16a}{\omega}\sin(\omega t' + \phi_f) -  \frac{16a}{\omega}\sin(\phi_f).
\end{equation}
% \red{DONE: double checked sign of $\omega$ and the integer 16.  HINT: atom lib}
% # MSR(t)=at + (2D/\omega) \sin(\omega t + \phi_f),
% # plot ^this model for MSR for fitty parameter settings (LR)
% a=3.535902;D=a/2;
% phi_f=0.;
% # phi_f=-np.pi/2;
% period=0.12 #s
% omega=2*np.pi/period
% constant=-8*D*np.sin(phi_f)/omega#0.15
% t_values=np.linspace(0,1,1000)
% MSR_values_oscillatory=4*(a*t_values+(2*D/omega)*np.sin(omega*t_values+phi_f))+constant
% % ^this was successfully reproduced with RMSE=?? by the following command
% kwargs_lr=dict(a=3.535902, D=3.535902/2, initial_phase_orientation=0, period_of_oscillation=120, num_pairs=1000, rstart=0.0001, Dt=1e-05,
%               xmin=0, xmax=0.1, ymin=0, ymax=0.6, alpha=0.7, show_inputted_a=False, show_title=False, show_legend=True, use_xylim=True, show_label_black_dotted=False, printing=False, plotting=True)#, c='C3', label='Simulation')
% dict_fit_lr=visualize_model_oscillatory_reversed(ax=ax,c='C1',label='Simulation of Osc. (LR)', **kwargs_lr)
%%% ^this calls gener_positions_oscillatory_reversed, directly passing period_of_oscillation, which uses
% omega=((1e-3*period_of_oscillation/(2*np.pi))**-1)
% time_constant=initial_phase_orientation/omega
% ... then
% F1x*=np.cos(omega*t)
% F1y*=np.cos(omega*t)
% ... then
% x1step_values=-F1x+dxW1_values
% y1step_values=-F1y+dyW1_values
% x2step_values=F1x+dxW2_values
% y2step_values=F1y+dyW2_values
% therefore, omega is passed agnostically to the LR model, and the distinction is made by the FK model by
% kwargs_fk=dict(a=1.604153, D=1.604153/2, initial_phase_orientation=-np.pi/2, period_of_oscillation=110, num_pairs=1000, rstart=0.0001, Dt=1e-05,
%               xmin=0, xmax=0.1, ymin=0, ymax=0.6, alpha=0.7, show_inputted_a=False, show_title=False, show_legend=True, use_xylim=True, show_label_black_dotted=False, printing=False, plotting=True)#, c='C3', label='Simulation')
% % --> uses initial_phase_orientation=-np.pi/2
% omega=((1e-3*period_of_oscillation/(2*np.pi))**-1)
% time_constant=initial_phase_orientation/omega
% t=step_num*Dt + time_constant
